#+TITLE: Cássio's Emacs Config 
:PROPERTIES:
#+AUTHOR: Cássio Ávila
#+PROPERTY: header-args :results silent :tangle yes
#+STARTUP: fold
:END:

* Meta

This configurations aims to be for mainly working with programming in clojure, but be flexible enought to use it with another languages like go, elixir, c, etc..

** Init file header

#+begin_src emacs-lisp 
  ;; -*- lexical-binding: t; -*-
  ;;; 
  ;;; Cassio's Emacs Configuration
  ;;;

  ;; Copyright (C) Cássio Ávila
  ;; Author: Cássio Ávila <cassioavila@protonmail.com>
  ;; URL: https://github.com/toniz4/.emacs.d
  ;; This file is not part of GNU Emacs.
  ;; This file is free software.

  ;; The following code was auto-tangled from init.org. ;;

#+end_src

* Startup
** Early init

This writes to /early-init.el/, disabling and elabling before early in the Emacs initialization

#+begin_src emacs-lisp :tangle ./early-init.el
  ;; -*- lexical-binding: t; -*-

  ;; Garbage Collections
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            #'(lambda () (setq gc-cons-threshold (* 2 1000 1000))))

  ;; Data emacs reads from process
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  ;; Compile warnings
  ;;  (setq warning-minimum-level :emergency)
  (setq native-comp-async-report-warnings-errors 'silent) ;; native-comp warning
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))

  (setq package-native-compile t
        native-comp-deferred-compilation t
        native-comp-async-report-warnings-errors nil)

  ;; MISC OPTIMIZATIONS ----
    ;;; optimizations (froom Doom's core.el). See that file for descriptions.
  (setq idle-update-delay 1.0)

  ;; Disabling bidi (bidirectional editing stuff)
  (setq-default bidi-display-reordering 'left-to-right 
                bidi-paragraph-direction 'left-to-right)
  (setq bidi-inhibit-bpa t)  ; emacs 27 only - disables bidirectional parenthesis

  (setq highlight-nonselected-windows nil)
  (setq fast-but-imprecise-scrolling t)
  (setq inhibit-compacting-font-caches t)

  ;; Disable default package.el
  (setq package-enable-at-startup nil)
#+end_src

* General Config
** Quality of life

Good to have configs

#+begin_src emacs-lisp
  (setq use-short-answers t)
  (setq ring-bell-function 'ignore)

  ;; scroll
  (setq scroll-conservatively 1000)
  (setq scroll-margin 2)

  ;; Revert window changes
  (winner-mode)
#+end_src

** Emacs Directories

Use saner directories

#+begin_src emacs-lisp
  ; Cache directory
  (setq user-emacs-directory "~/.cache/emacs/")

  (when (not (file-directory-p user-emacs-directory))
    (make-directory user-emacs-directory t))

  ; Backup directory
  (setq backup-directory-alist `((".*" . ,(expand-file-name "backups" user-emacs-directory)))
	backup-by-copying t
	version-control t
	delete-old-versions t
	vc-make-backup-files t
	kept-old-versions 10
	kept-new-versions 10)

  (setq native-comp-eln-load-path
	(list (expand-file-name "eln-cache" user-emacs-directory)))
#+end_src

** Visual

Remove ugly stuff, add pretty stuff

#+begin_src emacs-lisp
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)

  (blink-cursor-mode 0)

  (setq inhibit-startup-screen t
        inhibit-startup-echo-area-message t
        initial-scratch-message nil
        server-client-instructions nil)

  (load-theme 'mplex t)

  ; Line number mode
  (setq display-line-numbers-type 'relative)

  (global-display-line-numbers-mode)
#+end_src

** Fonts

Set the font /main-font/, if not avaliable, use /monospace/ as a fallback

#+begin_src elisp
  (defun my/set-font-faces ()
    (let* ((main-font "GoMono Nerd Font Mono 9")
           (fallback "monospace")
           (font (if (x-list-fonts main-font) main-font fallback)))
      (set-face-attribute 'default nil :font font)
      (set-face-attribute 'fixed-pitch nil :font font)))

  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                  (with-selected-frame frame (my/set-font-faces))))
    (my/set-font-faces))
#+END_SRC

** Hooks

Add hooks to modes

#+begin_src emacs-lisp
  (add-hook 'prog-mode-hook
            (lambda ()
              (electric-pair-local-mode t)))
#+end_src

* Packages
** Straight Config

Bootstraps straight.el

#+begin_src emacs-lisp
  ; Straight bootstrap
  (setq straight-check-for-modifications nil)

  (defvar bootstrap-version)

  (let ((bootstrap-file
         (expand-file-name
          "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  ; Straight config
  (straight-use-package 'use-package)
  (setq straight-use-package-by-default t)
  (require 'org-tempo)
#+end_src

** Text Editing
*** Evil mode

Make using emacs a good experience

#+begin_src emacs-lisp
  (defun my-set-evil-keybinds ()
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-define-key 'normal 'global (kbd "<leader>lf") 'find-file)
    (evil-define-key 'normal 'global (kbd "<leader>ss") 'sp-forward-slurp-sexp)
    (evil-define-key 'normal 'global (kbd "<leader>sb") 'sp-forword-barf-sexp)
    (evil-define-key 'normal 'global (kbd "<leader>lb") 'switch-to-buffer))

  (use-package evil
    :demand t
    :bind (("<escape>" . keyboard-escape-quit))
    :init
    (setq evil-operator-state-tag "OPR"
          evil-normal-state-tag "NOR"
          evil-insert-state-tag "INS"
          evil-visual-state-tag "VIS"
          evil-replace-state-tag "REP"
          evil-emacs-state-tag "EMC"
          evil-motion-state-tag "MOT")

    (use-package undo-fu)

    (setq evil-echo-state nil
          evil-undo-system 'undo-fu
          evil-want-C-u-scroll t
          evil-want-Y-yank-to-eol t
          evil-search-module 'evil-search)

    :custom
    (evil-want-keybinding nil)
    :config
    (evil-mode 1)
    (my-set-evil-keybinds))

  (use-package evil-collection
    :demand t
    :after evil
    :config
    (evil-collection-init))

  (use-package evil-org
    :after org
    :hook (org-mode . (lambda () evil-org-mode))
    :config
    (require 'evil-org-agenda)
    (evil-org-agenda-set-keys))

  (use-package evil-commentary
    :init (evil-commentary-mode))
#+end_src

** Quality of life
*** Vertico

Better menu for M-x, find-file, etc..

#+begin_src emacs-lisp
  (use-package vertico
    :init
    (use-package savehist
      :init
      (savehist-mode))

    (vertico-mode)
    (setq vertico-scroll-margin 2))
#+end_src

*** Which key

I don't remember most of emacs keybindings

#+begin_src emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+end_src

*** Pulsar

Makes me not lost when dealing with multiple windows

#+begin_src emacs-lisp
  (use-package pulsar
    :init
    (pulsar-global-mode))
#+end_src

*** Direnv

Use direnv when changind directories in emacs

#+begin_src emacs-lisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

** Misc packages
*** Rainbow Mode

Highlights RGB text in files

#+begin_src emacs-lisp
  (use-package rainbow-mode)
#+end_src

*** Dashboard

Cool starting screen

#+begin_src emacs-lisp
  (use-package dashboard
    :config
    (setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*")))
    (setq dashboard-startup-banner 'logo)
    (setq dashboard-center-content t)

    (dashboard-setup-startup-hook))
#+end_src

** Language modes
*** Fish

#+begin_src emacs-lisp
  (use-package fish-mode)
#+end_src

*** Lua

#+begin_src emacs-lisp
  (use-package lua-mode)
#+end_src

*** Go

#+begin_src emacs-lisp
  (use-package go-mode)
#+end_src

*** Elixir

#+begin_src emacs-lisp
  (use-package elixir-mode)
#+end_src

*** Nix

#+begin_src emacs-lisp
  (use-package nix-mode
    :mode "\\.nix\\'")
#+end_src

*** Clojure

#+begin_src emacs-lisp
  (use-package clojure-mode)

  (use-package cider
    :init
    (setq cider-show-error-buffer nil))
#+end_src

** Text Completion
*** Yasnippet

Snippets are cool

#+begin_src emacs-lisp
  (use-package yasnippet-snippets)

  (use-package yasnippet
    :init
    (yas-global-mode))
#+end_src

*** Company

Completion menu

#+begin_src emacs-lisp
  (use-package company
    :config
    (setq company-minimum-prefix-length 1
          company-idle-delay 0.0 
          company-selection-wrap-around t)

    (setq company-format-margin-function #'company-text-icons-margin)
    (setq company-tooltip-align-annotations t)
    (setq company-tooltip-width-grow-only t)

    ;; make company evil compatible
    (mapc #'evil-declare-change-repeat
          '(company-complete-common
            company-select-next
            company-select-previous
            company-complete-selection))

    (add-to-list 'company-backends '(company-capf :with company-yasnippet))
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** LSP
*** LSP mode

#+begin_src emacs-lisp
  (use-package lsp-mode
    :init
    (setq lsp-keymap-prefix "C-c l")
    (setq lsp-headerline-breadcrumb-enable nil)

    :hook ((clojure-mode . lsp-deferred)
           (go-mode . lsp-deferred)
           (c-mode . lsp-deferred)
           (lsp-mode . flycheck-mode)
           (lsp-mode . yas-minor-mode)
           (lsp-mode . lsp-enable-which-key-integration))
    :commands lsp lsp-deferred)
#+end_src

*** LSP UI

#+begin_src emacs-lisp
  (use-package lsp-ui :commands lsp-ui-mode)
#+end_src

** UI
*** Doom Themes

#+begin_src emacs-lisp
  (use-package doom-themes)
#+end_src

*** Doom Modeline

#+begin_src emacs-lisp
  (use-package doom-modeline
    :init
    (setq doom-modeline-height 0)
    :hook (after-init . doom-modeline-mode))
#+end_src

** Org Mode
*** Org package

Emacs comes with a out of date version of org mode

#+begin_src emacs-lisp
  (defun my/org-mode-setup ()
    (display-line-numbers-mode 0)
    (org-indent-mode)
    ;; (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)

    (company-mode 0)
    ;; Org tempo
    (require 'org-tempo)

    (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python")))

  (use-package org
    :hook
    (org-mode . my/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t))
#+end_src

*** Org Bullets

#+begin_src emacs-lisp
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode))
#+end_src

